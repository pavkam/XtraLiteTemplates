//
//  Author:
//    Alexandru Ciobanu alex@ciobanu.org
//
//  Copyright (c) 2015, Alexandru Ciobanu (alex@ciobanu.org)
//
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in
//       the documentation and/or other materials provided with the distribution.
//     * Neither the name of the [ORGANIZATION] nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

namespace XtraLiteTemplates.ObjectModel
{
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Text;
    using XtraLiteTemplates.Expressions;
    using XtraLiteTemplates.ObjectModel.Directives;
    using XtraLiteTemplates.Parsing;

    public sealed class DirectiveNode : CompositeNode, IEvaluable
    {
        public Directive Directive { get; private set; }

        internal DirectiveNode(TemplateNode parent, Directive directive)
            : base(parent)
        {
            Debug.Assert(parent != null);
            Debug.Assert(directive != null);

            Directive = directive;
        }

        public override void Evaluate(TextWriter writer, IDirectiveEvaluationContext nodeContext, 
            IExpressionEvaluationContext expressionContext)
        {
            Expect.NotNull("writer", writer);
            Expect.NotNull("nodeContext", nodeContext);
            Expect.NotNull("expressionContext", expressionContext);

            Debug.Assert(Children.Count > 0);

            var tagNodeIndex = 0;
            var tagNode = Children[tagNodeIndex] as TagNode;
            Debug.Assert(tagNode != null);

            Object state = null;
            while (tagNode != null)
            {
                var tagComponents = tagNode.Evaluate(expressionContext);
                String text;
                var flow = Directive.Execute(tagNode.Tag, tagComponents, ref state, nodeContext, out text);

                /* Return any text that was generated by the edirective itself. */
                if (text != null)
                    writer.Write(nodeContext.HandleDirectiveText(Directive, text));

                if (flow == Directive.FlowDecision.Terminate)
                    tagNode = null;
                else if (flow == Directive.FlowDecision.Restart)
                {
                    tagNodeIndex = 0;
                    tagNode = Children[tagNodeIndex] as TagNode;
                }
                else if (flow == Directive.FlowDecision.Evaluate)
                {
                    /* Evaluate inner nodes */
                    tagNode = null;
                    for (var i = tagNodeIndex + 1; i < Children.Count; i++)
                    {
                        tagNode = Children[i] as TagNode;
                        if (tagNode != null)
                            break;

                        var evaluable = Children[i] as IEvaluable;
                        Debug.Assert(evaluable != null);

                        evaluable.Evaluate(writer, nodeContext, expressionContext);
                    }
                }
                else if (flow == Directive.FlowDecision.Skip)
                {
                    /* Evaluate inner nodes */
                    tagNode = null;
                    for (var i = tagNodeIndex + 1; i < Children.Count; i++)
                    {
                        tagNode = Children[i] as TagNode;
                        if (tagNode != null)
                            break;
                    }
                }
            }
        }
    }
}

